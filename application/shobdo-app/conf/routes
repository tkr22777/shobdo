# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

###############################################
# 0. Splash dictionary message and test routes:
###############################################
GET     /api/v1                                          controllers.WordController.index()

################################
# CRUDL and search API for word:
################################

# 1. Create word:
POST    /api/v1/words                                    controllers.WordController.createWord()

# 2. Get word:
GET     /api/v1/words/:id                                controllers.WordController.getWordByWordId(id: String)

# 3. POST Get word by spelling: body contains "spelling" key and query value as Bengali unicode chars breaks route :(
POST    /api/v1/words/postget                            controllers.WordController.getWordBySpellingPost()

# 4. Update word:
PUT     /api/v1/words/:id                                controllers.WordController.updateWord(id: String)

# 5. Delete word:
DELETE  /api/v1/words/:id                                controllers.WordController.deleteWord(id: String)

# 6. List words
GET     /api/v1/words                                    controllers.WordController.listWords(startWordId: String?=null, limit: Integer?=null)

# 7. Search words by spelling:
#    requestBody contains "searchString"
POST    /api/v1/words/search                             controllers.WordController.searchWordsBySpelling()

##############################
# User Request APIs for Word :
##############################

# Create request for word creation:
POST    /api/v1/requests/words                           controllers.UserRequestController.createUserRequestForWordCreation()

# Create request for word update:
POST    /api/v1/requests/words/:wordId                   controllers.UserRequestController.createUserRequestForWordUpdate(wordId: String)

# Create request for word deletion:
POST    /api/v1/requests/words/:wordId                   controllers.UserRequestController.createUserRequestForWordDeletion(wordId: String)

##############################
# CRUDL API for word meanings:
##############################

# 1. Create a new meaning of a word
POST    /api/v1/words/:wordId/meanings                   controllers.WordController.createMeaning(wordId: String)

# 2. Get a specific meaning of a word
GET     /api/v1/words/:wordId/meanings/:meaningId        controllers.WordController.getMeaning(wordId: String, meaningId: String)

# 3. Update a specific meaning of a word
PUT     /api/v1/words/:wordId/meanings/:meaningId        controllers.WordController.updateMeaning(wordId: String, meaningId: String)

# 4. Delete a specific meaning of a word
DELETE  /api/v1/words/:wordId/meanings/:meaningId        controllers.WordController.deleteMeaning(wordId: String, meaningId: String)

# 5. List meanings of a word
GET     /api/v1/words/:wordId/meanings                   controllers.WordController.listMeanings(wordId: String)

###################################
# API for adding/removing antonyms:
###################################

# 1. Add an antonym to a word
POST    /api/v1/words/:wordId/meanings/:meaningId/antonym/add                controllers.WordController.addAntonym(wordId: String, meaningId: String)

# 2. Remove an antonym from a word
POST    /api/v1/words/:wordId/meanings/:meaningId/antonym/remove             controllers.WordController.removeAntonym(wordId: String, meaningId: String)

###################################
# API for adding/removing synonyms:
###################################

# 1. Add an antonym to a word
POST    /api/v1/words/:wordId/meanings/:meaningId/synonym/add                controllers.WordController.addSynonym(wordId: String, meaningId: String)

# 2. Remove an antonym from a word
POST    /api/v1/words/:wordId/meanings/:meaningId/synonym/remove             controllers.WordController.removeSynonym(wordId: String, meaningId: String)

##############
# Admin stuff:
##############
# CRUDL for users GENERAL, REVIEWER, ADMIN
# 9. To clear/flush redis cache:
GET     /api/v1/admin/flushcache                        controllers.AdminController.flushCache()

GET     /assets/*file                                   controllers.Assets.at(path="public", file)
